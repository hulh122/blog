(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{420:function(_,e,a){"use strict";a.r(e);var v=a(56),n=Object(v.a)({},(function(){var _=this,e=_.$createElement,a=_._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("Title"),_._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[_._v("#")]),_._v(" 简介")]),_._v(" "),a("p",[_._v("今年九月的时候，尤大将 vue 生态中所有开原仓库的包管理工具都换成了 "),a("code",[_._v("pnpm")]),_._v("。好家伙，又有可以学习的内容了。我知道 "),a("code",[_._v("npm")]),_._v("，也知道 "),a("code",[_._v("yarn")]),_._v("。\n可这 "),a("code",[_._v("pnpm")]),_._v(" 却未有所耳闻。")]),_._v(" "),a("h3",{attrs:{id:"当前盛行的包管理工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当前盛行的包管理工具"}},[_._v("#")]),_._v(" 当前盛行的包管理工具")]),_._v(" "),a("p",[_._v("之前尤大在推文中发起过一个关于包管理工具的使用比例 👇\n"),a("img",{attrs:{src:"/package.png"}}),_._v("\n这份统计数据向我们展示了当前最流行的前端包管理工具，其中 "),a("code",[_._v("npm")]),_._v(" 依然是先拔头筹，"),a("code",[_._v("yarn")]),_._v(" 紧随其后。排在末尾的还有个奇怪的东西 "),a("code",[_._v("pnpm")]),_._v("。")]),_._v(" "),a("h3",{attrs:{id:"聊聊-yarn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聊聊-yarn"}},[_._v("#")]),_._v(" 聊聊 yarn")]),_._v(" "),a("p",[a("strong",[_._v("工欲善其事必先利其器")]),_._v("，不知道长期使用 "),a("code",[_._v("npm")]),_._v(" 的同学有没有被漫长的依赖安装和过程中琳琅满目的输出信息所困扰。如果有，切换 "),a("code",[_._v("yarn")]),_._v(" 着实会让人舒服不少。")]),_._v(" "),a("p",[a("code",[_._v("yarn")]),_._v(" 的出现，主要有以下几个优化点：")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("npm")]),_._v(" 实在是太慢了，每次执行 "),a("code",[_._v("npm i")]),_._v(" 只是想更新一些新的依赖而已。这玩意儿可好，把我的 "),a("code",[_._v("node_modules")]),_._v(" 全删了，重新安装了一遍全部依赖。这时间我可等不起。"),a("code",[_._v("yarn")]),_._v(" 缓存一来，舒服了，未发生改变的文件命中缓存，改变的\n文件 diff 出来安装。这过程属实快了不少，甚至通过缓存支持了 "),a("code",[_._v("离线模式")]),_._v("，不像 "),a("code",[_._v("npm")]),_._v(" 每次走网络请求。")]),_._v(" "),a("li",[_._v("在 "),a("code",[_._v("npm5")]),_._v(" 之前是没有 "),a("code",[_._v("package-lock.json")]),_._v(" 文件的，这样我们在不同的宿主环境中，安装的依赖可能是不同的。有时候本地跑起来没问题，上到服务器就挂了。\n都怪它！而 "),a("code",[_._v("yarn")]),_._v(" 生来支持 "),a("code",[_._v("yarn-lock")]),_._v(" 文件，目录也更为清晰易读。再也不用担心上到服务器就挂了。")]),_._v(" "),a("li",[a("code",[_._v("yarn workspaces")]),_._v("，现代开发中我们更多采用了 "),a("code",[_._v("mono-repo")]),_._v(" 的组织方式，即将多个项目放在一个 repo 下面管理。在 "),a("code",[_._v("npm")]),_._v(" 下，如何管理每个项目的 "),a("code",[_._v("node_modules")]),_._v(" 成了个大问题。\n只能是在每个项目里安装其单独的依赖。而有了 "),a("code",[_._v("yarn")]),_._v("，我们可以通过它提供的 "),a("code",[_._v("workspaces")]),_._v(" 帮我们构建依赖关系，在顶层维护通用的 "),a("code",[_._v("node_modules")]),_._v("，而项目之前不同的部分，才在各自的 "),a("code",[_._v("node_modules")]),_._v(" 生成。")]),_._v(" "),a("li",[_._v("剩下的一些优化，如：更简洁的语义 / resolution 等功能，则是不太关键的点了。")])]),_._v(" "),a("h3",{attrs:{id:"聊聊-pnpm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聊聊-pnpm"}},[_._v("#")]),_._v(" 聊聊 pnpm")]),_._v(" "),a("p",[_._v("既然 "),a("code",[_._v("yarn")]),_._v(" 都这么强了，为啥尤大还要换到 "),a("code",[_._v("pnpm")]),_._v("？在详细了解后，我只能说：这玩意儿太强了！")]),_._v(" "),a("h4",{attrs:{id:"急速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#急速"}},[_._v("#")]),_._v(" 急速！")]),_._v(" "),a("p",[_._v("我们先前说 "),a("code",[_._v("yarn")]),_._v(" 安装是会有缓存的，如果命中缓存，则直接使用缓存。但即使是命中了缓存，"),a("code",[_._v("yarn")]),_._v(" 在项目中也会存在一个备份，所以，这个过程是拷贝过程。内存空间会随拷贝数线性递增。")]),_._v(" "),a("p",[a("code",[_._v("pnpm")]),_._v(" 依赖 "),a("code",[_._v("hard links（硬链接）")]),_._v("，将所有的依赖地址存在 "),a("code",[_._v("pnpm.store")]),_._v(" 中，而在硬盘唯一位置储存所有依赖包。在我们执行 "),a("code",[_._v("pnpm i")]),_._v(" 时，一旦我们的 "),a("code",[_._v("store")]),_._v("\n中能够找到这家伙，我们就直接提供地址指向这块存储空间。这样，依赖安装甚至不是拷贝而是创建一个硬链接，速度当然会快的不行，这是官方提供的依赖安装速度对比 👇\n"),a("img",{attrs:{src:"/pnpm.png"}}),_._v("\n真的是，"),a("strong",[_._v("好家伙")]),_._v("。")]),_._v(" "),a("h4",{attrs:{id:"解决扁平化带来的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决扁平化带来的问题"}},[_._v("#")]),_._v(" 解决扁平化带来的问题")]),_._v(" "),a("p",[_._v("除了可预见的速度提升，之前所提出的 "),a("a",{attrs:{href:"https://pnpm.io/zh/blog/2020/05/27/flat-node-modules-is-not-the-only-way",target:"_blank",rel:"noopener noreferrer"}},[_._v("扁平化 node_modules"),a("OutboundLink")],1),_._v(" 也受到了质疑。这一定是正确的方案吗？可预见的是，我们采用扁平化之后，会遭遇到一些问题：")]),_._v(" "),a("ul",[a("li",[_._v("Phantom dependencies（幽灵依赖）："),a("br"),_._v("\n我们想要安装一个依赖 A，它本身依赖了 B。还有一个依赖 C，它本身也依赖了 B。在扁平化以前的依赖安装模式：")])]),_._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("node_modules\n|__package A\n   |__package B\n|__package C\n   |__package B \n")])])]),a("p",[_._v("由于可能安装多次的问题，"),a("code",[_._v("yarn")]),_._v(" 中提出了 "),a("code",[_._v("依赖提升")]),_._v(" 的概念，将依赖扁平化：")]),_._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("node_modules\n|__package A\n|__package C\n|__package B\n")])])]),a("p",[_._v("这样在安装依赖的时候，就只会在顶层安装一次。这样也会造成问题，"),a("code",[_._v("Phantom dependencies")]),_._v(" 就是其中一个显著的问题。\n由于依赖都安装在顶层，我们在项目中是可以直接引入该依赖的。比如我们在项目中 "),a("code",[_._v("import * from package B")]),_._v("。当有一天，package A 取消了对 B 的依赖，\n我们的项目就会出问题。因为它本身不存在一个 package B 的依赖。")]),_._v(" "),a("ul",[a("li",[_._v("NPM doppelgangers（二重身问题）：\n也是在进行依赖提升时出现的一个问题，如果依赖包的版本不一致，及时将一个包提升到了顶层，由于其他版本的包不能提升到顶层这一特性（会造成冲突），只能在各自的包内安装依赖：")])]),_._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("node_modules\n|__package A\n|__package B@1.0\n|__package C\n|__package D\n   |__package B@2.0\n|__package E\n   |__package B@3.0\n")])])]),a("p",[a("code",[_._v("pnpm")]),_._v(" 通过 "),a("code",[_._v("symlink（符号链接）")]),_._v(" 来解决该问题：")]),_._v(" "),a("p",[_._v("我们来看看在上述方案中 A/B/C 包在 "),a("code",[_._v("pnpm i")]),_._v(" 后的 "),a("code",[_._v("node_modules")]),_._v(" 目录：")]),_._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("node_modules\n|__package A\n|__package C\n|__.pnpm\n")])])]),a("p",[_._v("会发现其中根本没有显示的 "),a("code",[_._v("package B")]),_._v("，事实上，"),a("code",[_._v("package A")]),_._v(" 和 "),a("code",[_._v("package B")]),_._v(" 也只是一个 "),a("code",[_._v("symlink")]),_._v(" 指向 "),a("code",[_._v(".pnpm")]),_._v(" 中的硬链接地址。")]),_._v(" "),a("h4",{attrs:{id:"这-pnpm-是何物呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这-pnpm-是何物呢"}},[_._v("#")]),_._v(" 这 .pnpm 是何物呢")]),_._v(" "),a("p",[a("code",[_._v(".pnpm")]),_._v(" 是一个虚拟磁盘，用于扁平化存放依赖。在 "),a("code",[_._v("node_modules")]),_._v(" 中的符号链接，已软链接的形式链接到虚拟磁盘中，虚拟磁盘则以硬链接到真实的\n依赖存储空间中：")]),_._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("node_modules\n|__package A -> 软链接\n|__package C -> 软链接\n|__.pnpm\n   |__package A/node_modules/package B -> 硬链接\n   |__package C/node_modules/package B -> 硬链接\n   |__package B@1.0 -> 硬链接\n")])])]),a("p",[_._v("在这样的结构中，"),a("code",[_._v(".pnpm")]),_._v(" 平铺了一份全部依赖，也在单独的项目里有自身的依赖，而且所有的依赖都是通过硬链接到一块内存地址的。实现了只下载一次，没有幽灵依赖和二重身问题。")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);