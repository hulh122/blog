(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{429:function(t,s,a){"use strict";a.r(s);var n=a(56),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("Title"),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("当我们聊到变量提升，你听过的最多的是什么？"),a("code",[t._v("var")]),t._v(" 的变量都是会提升的，"),a("code",[t._v("函数")]),t._v(" 都会提升，"),a("code",[t._v("let")]),t._v(" 不会提升？真的是这样吗？")]),t._v(" "),a("h3",{attrs:{id:"我们怎么理解变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们怎么理解变量提升"}},[t._v("#")]),t._v(" 我们怎么理解变量提升")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefind")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("👆 的例子应该大家在学习变量提升的时候都看过，当时我们的理解是，被 var 所申明的变量都会提升到最顶部，这样我们的变量就可以在申明前使用了。")]),t._v(" "),a("p",[t._v("但这样理解的方式是错误的，JS 引擎在解释在段代码的时候其实不是用了变量提升这个名词，而是先申明变量，再初始化它的值。")]),t._v(" "),a("ul",[a("li",[t._v("解释器找到这个解释的作用域。")]),t._v(" "),a("li",[t._v("申明作用域中的变量，并将他们初始化为 undefind。（申明 / 初始化）。")]),t._v(" "),a("li",[t._v("执行语句，第一句 a 为 undefind，第二句 a 被赋值为 1。")])]),t._v(" "),a("p",[t._v("再来看看函数的变量提升")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("函数的执行在申明之前，这在解释器中是怎么做到的？")]),t._v(" "),a("ul",[a("li",[t._v("解释器找到这个解释的作用域。")]),t._v(" "),a("li",[t._v("解释器找到了 function 这个关键字，将 fn 申明出来并对其赋值。（申明 / 赋值）。")]),t._v(" "),a("li",[t._v("执行语句，第一句执行 fn 函数。")])]),t._v(" "),a("p",[t._v("学会以上两个方式，再看看下面这个例子，是否是清晰的？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"let-是真的不会进行变量提升吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-是真的不会进行变量提升吗"}},[t._v("#")]),t._v(" let 是真的不会进行变量提升吗？")]),t._v(" "),a("p",[t._v("我在学习 "),a("code",[t._v("let")]),t._v(" 的时候，知道它有三大特性：")]),t._v(" "),a("ul",[a("li",[t._v("let 申明的变量的作用域是块级的。")]),t._v(" "),a("li",[t._v("let 不能重复声明已存在的变量。")]),t._v(" "),a("li",[t._v("let 有暂时性死区，不会被提升。")])]),t._v(" "),a("p",[t._v("但事实是 "),a("code",[t._v("let")]),t._v(" 会进行提升，但不会被初始化，由于其暂时性死区的特性（未初始化的值无法使用），所以引擎会报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("解释器在执行上面的语句是这么做的：")]),t._v(" "),a("ul",[a("li",[t._v("解释器找到这个解释的作用域。")]),t._v(" "),a("li",[t._v("解释器找到了 let 这个关键字，并申明了 a 这个变量，但没有"),a("strong",[t._v("初始化")]),t._v("。")]),t._v(" "),a("li",[t._v("执行语句，第一句是一个申明但没有初始化值的变量，触发暂时性死区，报错。")])]),t._v(" "),a("h3",{attrs:{id:"一些拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些拓展"}},[t._v("#")]),t._v(" 一些拓展")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/0f49c88cf169",target:"_blank",rel:"noopener noreferrer"}},[t._v("let 的深入理解"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);